/**
 * real-local.cc
 * 
 * Group 12: Jennie Kang, Edmund Lam, Jamila Toaha
 *
 * Project 4: Part 2 - Particle Filter - Real Localization
 *
 * Robot localizes itself using the particle filter and then navigates to target location using proportional control
 * 
 * Sample code for a robot that has two front bumpers and a laser scanner,
 * and. Suitable for use with the roomba.
 *
 * This version is intended to run with the AMCL localization proxy,
 * which provides multiple hypotheses.
 *
 * Written by: Simon Parsons
 * Date:       22nd November 2009
 *  
 **/



#include <iostream>
#include <libplayerc++/playerc++.h>
using namespace PlayerCc;  

/**
 * Function headers
 *
 **/

player_pose2d_t readPosition(LocalizeProxy& lp, int counter);
void printLaserData(LaserProxy& sp);
void printRobotData(BumperProxy& bp, player_pose2d_t pose);
void localize(BumperProxy& bp, LaserProxy& sp);
bool navigate(BumperProxy& bp);
double getTan(double xPos, double yPos, double xTarget, double yTarget);
float getDistance (double xPos, double yPos, double xTarget, double yTarget);

/**
 * main()
 *
 **/


  // === Global Variables - purpose is to make code both more readable and more easy to change

  // Localization 
  int counter = 0;
  double speed;            // How fast do we want the robot to go forwards?
  double turnrate;         // How fast do we want the robot to turn?
  player_pose2d_t  pose;   // For handling localization data
  player_laser_data laser; // For handling laser data
  int setFullRotationCounter = 0;

  // Navigation
  float distance; 	   // How far is robot from the target?
  double targetTan;  	   // Save the tan result for our target


  // === State Variables
  bool localizeState = true ; // We first want to localize robot before navigating
  bool navigateState = false; // Once we localize, then we want to navigate
  bool end = false; 

int main(int argc, char *argv[])
{  



  // Set up proxies. These are the names we will use to connect to 
  // the interface to the robot.
  PlayerClient    robot("localhost");  
  BumperProxy     bp(&robot,0);  
  Position2dProxy pp(&robot,0);
  LocalizeProxy   lp (&robot, 0);
  LaserProxy      sp (&robot, 0);

  // Allow the program to take charge of the motors (take care now)
  pp.SetMotorEnable(true);

  // Main control loop
  while(true) 
    {    
      // Update information from the robot.
      robot.Read();
      // Read new information about position
      pose = readPosition(lp, counter);
      // Print information about the laser. Check the counter first to stop
      // problems on startup
      if(counter > 2){
	printLaserData(sp);
      }

      // Print data on the robot to the terminal
      printRobotData(bp, pose);
      

      // Robot first goes through localization
      if(localizeState) localize(bp, sp); 

      // Once localizes, it navigates to destination
	
	if (navigateState) end = navigate(bp);
	if (end) break; // if the robot has stopped, break out of this loop

      // What are we doing?
      std::cout << "Speed: " << speed << std::endl;      
      std::cout << "Turn rate: " << turnrate << std::endl << std::endl;

      // Send the commands to the robot
      pp.SetSpeed(speed, turnrate);  
      // Count how many times we do this
      counter++;
    }
  
} // end of main()


/**
 * readPosition()
 *
 * Read the position of the robot from the localization proxy. 
 *
 * The localization proxy gives us a set of "hypotheses", each of
 * which is a number of possible locations for the robot, and from
 * each we extract the mean, which is a pose.
 *
 * As the number of hypotheses drops, the robot should be more sure
 * of where it is.
 *
 **/

player_pose2d_t readPosition(LocalizeProxy& lp, int counter)
{

  player_localize_hypoth_t hypothesis;
  player_pose2d_t          tempPose;
  uint32_t                 hCount;
  double                   weight;

  // Need some messing around to avoid a crash when the proxy is
  // starting up.

  hCount = lp.GetHypothCount();

  std::cout << "AMCL gives us " << hCount + 1 
            << " possible locations:" << std::endl;
 

  //Once the robot has narrow down the hypotheses to 1 or 2 options, the robot chooses on hypothesis with the highest weight as it's location
  if(hCount < 3 && counter >= 22){
 	 int highestWeightIndex = 0;

  	 for(int i = 0; i <= hCount; i++){
		
    	 	hypothesis = lp.GetHypoth(i);
     		tempPose       = hypothesis.mean;
     	 	weight     = hypothesis.alpha;

		//This line will filter out index with the highest weight;
		highestWeightIndex = lp.GetHypoth(highestWeightIndex).alpha < weight ? weight: highestWeightIndex; 

     		std::cout << "X: " << tempPose.px << "\t";
      		std::cout << "Y: " << tempPose.py << "\t";
     		std::cout << "A: " << tempPose.pa << "\t";
      		std::cout << "W: " << weight  << std::endl;
   	 }

	//This will calculate chosen hypothesis
	hypothesis = lp.GetHypoth(highestWeightIndex);
     	pose       = hypothesis.mean;
	weight     = hypothesis.alpha;

  	std::cout << "I am at: (" << pose.px << " , " << pose.py << "). " << std::endl;
  	std::cout << "I am: " << weight * 100 << "percent sure of my position." << std::endl;
 

}
else if(hCount > 0){
    for(int i = 0; i <= hCount; i++){
      hypothesis = lp.GetHypoth(i);
      tempPose       = hypothesis.mean;
      weight     = hypothesis.alpha;
      std::cout << "X: " << tempPose.px << "\t";
      std::cout << "Y: " << tempPose.py << "\t";
      std::cout << "A: " << tempPose.pa << "\t";
      std::cout << "W: " << weight  << std::endl;
    }
  }

  // This just returns the mean of the last hypothesis, it isn't necessarily
  // the right one.

  return pose;
} // End of readPosition()

void printLaserData(LaserProxy& sp)
{

  double maxRange, minLeft, minRight, range, bearing, middleScanLine, leftRange, rightRange;
  int points;

  maxRange  = sp.GetMaxRange();
  minLeft   = sp.MinLeft();
  minRight  = sp.MinRight();
  range     = sp.GetRange(5);
  bearing   = sp.GetBearing(5);
  points    = sp.GetCount();
  middleScanLine = sp.GetRange(180);
  leftRange = sp.GetRange(360);  // left most range
  rightRange = sp.GetRange(0);    // right most range

  //Print out useful laser data
  std::cout << "Laser says..." << std::endl;
  std::cout << "Maximum distance I can see: " << maxRange << std::endl;
  std::cout << "Number of readings I return: " << points << std::endl;
  std::cout << "Closest thing on left: " << minLeft << std::endl;
  std::cout << "Closest thing on right: " << minRight << std::endl;
  std::cout << "Range of a middle scan line: " << middleScanLine << std::endl;
  std::cout << "Range of a single point: " << range << std::endl;
  std::cout << "Bearing of a single point: " << bearing << std::endl;
  std::cout << "Range of Left Most Point: " << leftRange << std::endl;
  std::cout << "Range of Right Most Point: " << rightRange << std::endl;

  return;
} // End of printLaserData()

/**
 *  printRobotData
 *
 * Print out data on the state of the bumpers and the current location
 * of the robot.
 *
 **/

void printRobotData(BumperProxy& bp, player_pose2d_t pose)
{

  // Print out what the bumpers tell us:
  std::cout << "Left  bumper: " << bp[0] << std::endl;
  std::cout << "Right bumper: " << bp[1] << std::endl;
  // Can also print the bumpers with:
  //std::cout << bp << std::endl;

  // Print out where we are
  std::cout << "We are at" << std::endl;
  std::cout << "X: " << pose.px << std::endl;
  std::cout << "Y: " << pose.py << std::endl;
  std::cout << "A: " << pose.pa << std::endl;

  
} // End of printRobotData()


// The localize function localizes the robot. First backs up, and moves forward, which seems to trigger a consistent localization success. Once completed changes state of app.

void localize(BumperProxy& bp, LaserProxy& sp) {

// If either bumper is pressed, stop. Otherwise just go forwards

      if(bp[0] || bp[1]){
	speed= 0;
	turnrate= 0;
      } 
      else if (counter > 2 && counter < 22) { //give robot 5 seconds to move back
	speed = -.5;
	turnrate = 0;
      } 
      else if (counter >=22 && counter < 122) { //give robot 10 seconds to turn
	speed = 0;
	turnrate = dtor(40);

      } else if (counter >=122 && counter < 144) {
	speed = .2;
	turnrate = 0;
      }

      else {
	//move forward if not obstacles ahead
	speed= .2;
	turnrate = 0; 
	

	if(counter > 2 && sp.GetRange(180) < 1) {
	  turnrate = dtor(40);
	  speed = 0;
	}
	if(counter > 2 && sp.MinRight() < .6) {
	  turnrate = dtor(40);
	  speed = 0;
	}
	if(counter > 2 && sp.MinLeft() < .6) {
	  turnrate = dtor(-40);
	  speed = 0;
	}

      }


	if(counter > 160) {
	 localizeState = false ; // We first want to localize robot before navigating
	 navigateState = true; 
  	std::cout << "=========================================================" << std::endl;
  	std::cout << "Success Localization!" << std::endl;
  	std::cout << "=========================================================" << std::endl;
	}     


}


//Once robot localizes it goes towards the destination (5, -3.5)
bool navigate (BumperProxy& bp) {

      distance = getDistance(pose.px, pose.py, 5, -3.5);
      targetTan = getTan(pose.px, pose.py, 5, -3.5) -.1;

 // If either bumper is pressed, stop. Otherwise just go forwards
		
      if(bp[0] || bp[1]){
	speed= 0;
	turnrate= 0;
      } 
      else {
	//turn robot counter-clockwise if the robot's current angle is less than the target position, X = 5, Y = -3.5
//getTan   (2.5/11)

	if(pose.pa < targetTan ) {

		double degrees = 1 +  30 * (1- pose.pa/targetTan); //proportional control version 2 // 11 is maximum distance we think it will be. 

		turnrate = dtor(degrees);

	}
	//if robot is facing the target position, go towards it
	else if(pose.pa >= getTan (pose.px, pose.py, 5, -3.5) -.1) {

	 //speed = 0.1 + (100 / (double) distance);	 //proportional control, version 1
	// speed = 0.1 +  0.9 * ((double)distance/11); //proportional control version 2 // 11 is maximum distance we think it will be. //maximum speed: 1, minimum speed: .1	 
	speed = 1 * ((double)distance/11); //proportional control version 2 // 11 is maximum distance we think it will be. //maximum speed: 1, minimum speed: .1 

	    turnrate = 0;
		//robot comes to a stop around X = 4.8, Y = -3.3
		if(pose.px > 4.8 && pose.py > -4) {
	           turnrate = 0;
		   speed = 0;

  	std::cout << "=========================================================" << std::endl;
  	std::cout << "Success Navigation!" << std::endl;
  	std::cout << "=========================================================" << std::endl;
		 return true; // returns true so while loop knows to terminate program
	        }
	        		
        } 
      }   

	return false; // returns false so while loop does not terminate program
}



double getTan (double xPos, double yPos, double xTarget, double yTarget){
	return tan ((yTarget - yPos) /(xTarget -xPos));
}


float getDistance (double xPos, double yPos, double xTarget, double yTarget) {
	return sqrt (pow(xTarget-xPos, 2) + 
		     pow(yTarget-yPos, 2) );
}



